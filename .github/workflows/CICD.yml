name: Capstone Design CI & CD

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    name: Build jar Push Docker Image at Docker hub
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Create Firebase Service Account File
        run: |
          mkdir -p ./src/main/resources/firebase
          echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}' > ./src/main/resources/firebase/firebase_service_key.json

      - name: Set up yml file
        uses: microsoft/variable-substitution@v1
        with:
          files: ./src/main/resources/application-prod.yml
        env:
          spring.datasource.url: ${{ secrets.RDS_URL }}
          spring.datasource.username: ${{ secrets.RDS_USERNAME }}
          spring.datasource.password: ${{ secrets.RDS_PASSWORD }}

          spring.data.redis.host: ${{ secrets.REDIS_HOST }}
          spring.data.redis.password: ${{ secrets.REDIS_PASSWORD}}

          spring.security.jwt.secret: ${{ secrets.JWT_SECRET }}
          spring.security.jwt.access-token.expired-time: ${{ secrets.JWT_ACCESS_TOKEN_EXPIRED_TIME}}
          spring.security.jwt.refresh-token.expired-time: ${{ secrets.JWT_REFRESH_TOKEN_EXPIRED_TIME}}

          spring.oauth2.client.registration.google.client-id: ${{ secrets.GOOGLE_CLIENT_ID }}
          spring.oauth2.client.registration.google.client-secret: ${{ secrets.GOOGLE_CLIENT_SECRET }}

          spring.oauth2.client.registration.naver.client-id: ${{ secrets.NAVER_CLIENT_ID }}
          spring.oauth2.client.registration.naver.client-secret: ${{ secrets.NAVER_CLIENT_SECRET }}

          spring.oauth2.client.registration.kakao.client-id: ${{ secrets.KAKAO_CLIENT_ID }}
          spring.oauth2.client.registration.kakao.client-secret: ${{ secrets.KAKAO_CLIENT_SECRET }}

          model-server.url: ${{ secrets.MODEL_SERVER_URL}}

      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test -i --no-daemon -Dspring.profiles.active=prod

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/haruni-server:latest .

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/haruni-server:latest

  deploy:
    name: Deploy to remote EC2 Server
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Copy docker compose file to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.AWS_EC2_IP }}
          username: ${{ secrets.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_KEY }}
          port: ${{ secrets.AWS_EC2_PORT }}
          source: "docker-compose.yml"
          target: "/home/ubuntu"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_IP }}
          username: ${{ secrets.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_KEY }}
          port: ${{ secrets.AWS_EC2_PORT }}
          script: |
            cd /home/ubuntu
            docker pull ${{ secrets.DOCKER_USERNAME }}/haruni-server:latest
            
            echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" > .env
            echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env
            
            if [ "$(docker ps -aq -f name=spring-server)" ]; then
              docker stop spring-server
              docker rm spring-server
            fi
            
            if [ "$(docker ps -aq -f name=inffy-redis)" ]; then
              docker stop redis-server
              docker rm redis-server
            fi

            docker-compose up -d